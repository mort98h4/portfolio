---
interface Props {
    id: string;
    data: any[];
}

const { id, data } = Astro.props;
---

<div id={id} class="col-span-full grid grid-cols-12 items-center relative">
    <ul class="hidden sm:block sm:col-span-5 md:col-span-4 lg:col-span-3">
        {data.map(exp => (
            <li 
                id={id + '-experience-' + exp.data.id}
                data-carousel={'#' + id}
                data-target={'#' + id + '-experience-details-' + exp.data.id}
                class={
                    'experience md:text-lg lg:text-xl font-medium px-4 py-2 border-l-2 '
                    + (data[0].data.id === exp.data.id ? 'active' : '')
                }
            >
                {
                    exp.data.name ? exp.data.name
                    : exp.data.institution
                }
            </li>
        ))}
    </ul>

    <div class="details-container col-span-full sm:col-span-7 md:col-span-8 lg:col-span-9 relative overflow-hidden">
        {data.map(exp => (
            <article 
                id={id + '-experience-details-' + exp.data.id}
                aria-hidden={(data[0].data.id === exp.data.id ? 'false' : 'true')}
                class="experience-details w-full relative"
            >
                <header class="mb-4 w-full flex flex-col md:mb-2 md:gap-2 md:flex-row ">
                    <div class="sm:text-lg md:text-xl md:grow lg:text-2xl">
                        <h4 class="">
                            {
                                exp.data.name ? exp.data.name 
                                : exp.data.institution
                            }
                        </h4>
                        <h5 class="mb-2">
                            {
                                id === 'school' ? 
                                `${exp.data.level}, ${exp.data.institutionShort}`
                                : exp.data.position
                            }
                        </h5>
                    </div>
                    
                    <span class="experience-period text-sm font-medium border rounded px-2 py-1">{exp.data.periodStart} - {exp.data.periodEnd ? exp.data.periodEnd : 'present'}</span>
                </header>
                <main>
                    <p class="">
                        {exp.data.description}
                    </p>
                </main>
            </article>
        ))}
        
    </div>
    <nav class="col-span-full flex justify-center gap-2 mt-4 sm:hidden">
        <button
            disabled="true"
            data-carousel={'#' + id}
            data-carousel-direction="prev"
            data-target=""
            data-carousel-active-index="1"
            data-carousel-length={data.length}
            class="carousel-btn inline-flex justify-center items-center w-8 h-8 rounded-full border cursor-pointer"
        >
            <i class="fa-solid fa-arrow-left text-[1.25rem] pointer-events-none"></i>
        </button>
        <button
            data-carousel={'#' + id}
            data-carousel-direction="next"
            data-target={'#' + id + '-experience-details-2'}
            data-carousel-active-index="1"
            data-carousel-length={data.length}
            class="carousel-btn inline-flex justify-center items-center w-8 h-8 rounded-full border cursor-pointer"
        >
            <i class="fa-solid fa-arrow-right text-[1.25rem] pointer-events-none"></i>
        </button>
    </nav>
</div>

<style>
    li {
        transition-property: color, border-color;
        transition-duration: .15s;
        transition-timing-function: ease-in-out;
        color: var(--color-2);
        border-color: var(--color-3);
        cursor: pointer;
    }

    li.active {
        color: var(--color-1);
        border-color: var(--color-1);
    }

    .details-container {
        display: flex;
        overflow-x: auto;
        scroll-snap-type: x mandatory;
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
    }

    .details-container::-webkit-scrollbar {
        display: none;
    }

    .experience-details {
        scroll-snap-align: start;
        flex-shrink: 0;
        width: 100%;
        margin-right: 3rem;
    }

    .experience-details h4 {
        color: var(--color-2);
    }

    html.dark .experience-details h4 {
        color: var(--color-1);
    }

    .experience-period {
        width: fit-content;
        height: fit-content;
        white-space: nowrap;
        background-color: rgba(var(--color-1-rgb), .1);
        color: var(--color-2);
    }

    html.dark .experience-period {
        color: var(--color-1);
        background-color: var(--color-4);
    }

    .carousel-btn {
        transition-property: color, background-color, border-color;
		transition-duration: .15s;
		transition-timing-function: ease-in-out;
		background-color: rgba(var(--color-1-rgb), .1);
		border-color: rgba(var(--color-2-rgb), 1);
		color: rgba(var(--color-2-rgb), 1);
    }

    .carousel-btn:disabled {
        pointer-events: none;
        cursor: not-allowed;
        opacity: .5;
    }

    html.dark .carousel-btn {
        background-color: var(--color-4);
		border-color: var(--color-3);
		color: var(--color-2);
    }

    .carousel-btn:not(:disabled):hover {
        background-color: rgba(var(--color-1-rgb), .3);
		border-color: rgba(var(--color-3-rgb), 1);
		color: rgba(var(--color-4-rgb), 1);
    }

    html.dark .carousel-btn:not(:disabled):hover {
        background-color: var(--color-3);
		border-color: var(--color-2);
		color: var(--color-1);
    }
</style>

<script>
    'use strict';

    window.addEventListener('DOMContentLoaded', initExperienceList);

    function initExperienceList() {
        document.querySelectorAll('.experience').forEach(item => {
            item.addEventListener('click', experienceClick);
        });

        document.querySelectorAll('.carousel-btn').forEach(btn => {
            btn.addEventListener('click', btnClick);
        });
    }

    function experienceClick() {
        const carousel = this.dataset.carousel;
        document.querySelectorAll(`${carousel} li.experience`).forEach(item => {
            item.classList.remove('active');
        });
        this.classList.add('active');

        displayExperience(this.dataset.target, carousel);
    }

    function btnClick() {
        const target = this.dataset.target;
        const carousel = this.dataset.carousel;
        const newTarget = `${carousel}-experience-details-`;
        let prevTarget = newTarget;
        let nextTarget = newTarget;

        const direction = this.dataset.carouselDirection;
        const prevBtn = document.querySelector(`${carousel} button[data-carousel-direction="prev"]`);
        const nextBtn = document.querySelector(`${carousel} button[data-carousel-direction="next"]`);

        const activeIndex = parseInt(this.dataset.carouselActiveIndex);
        let nextIndex;
        const maxIndex = parseInt(this.dataset.carouselLength);
        const minIndex = 1;

        if (direction === 'next') {
            nextIndex = activeIndex + 1;
            prevTarget += activeIndex;       
            nextTarget += (nextIndex + 1);
        }

        if (direction === 'prev') {
            nextIndex = activeIndex - 1;
            prevTarget += (nextIndex - 1);
            nextTarget += activeIndex;
        }

        prevBtn.setAttribute('data-target', prevTarget);
        nextBtn.setAttribute('data-target', nextTarget);

        setDisabledState(prevBtn, nextIndex, minIndex);
        setDisabledState(nextBtn, nextIndex, maxIndex);

        prevBtn.setAttribute('data-carousel-active-index', nextIndex);
        nextBtn.setAttribute('data-carousel-active-index', nextIndex);

        displayExperience(target, carousel);
    }

    function setDisabledState(target, index, compareIndex) {
        if (index === compareIndex) {
            target.setAttribute('disabled', true);
        } else {
            target.removeAttribute('disabled');
        }
    }

    function displayExperience(targetElemId, carouselId) {
        document.querySelectorAll(`${carouselId} .experience-details`).forEach(item => item.setAttribute('aria-hidden', 'true'));
        const target = document.querySelector(targetElemId);
        target.scrollIntoView({block: "nearest"});
        target.setAttribute('aria-hidden', false);
    }
</script>
